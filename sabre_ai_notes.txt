- 	If the build option USE_COHERENT_MEM is enabled, each platform can allocate a block of identity 
	mapped secure memory with Device-nGnRE attributes aligned to page boundary (4K) for each BL stage.

-	Handling coherent memory

-	







3.   Common mandatory modifications

    3.1.   File : platform_def.h [mandatory]
    3.2.   File : plat_macros.S [mandatory]

4.   Handling Reset

    4.1.   Function : plat_get_my_entrypoint() [mandatory when PROGRAMMABLE_RESET_ADDRESS == 0]
    4.2.   Function : plat_secondary_cold_boot_setup() [mandatory when COLD_BOOT_SINGLE_CPU == 0]
    4.3.   Function : plat_is_my_cpu_primary() [mandatory when COLD_BOOT_SINGLE_CPU == 0]
    4.4.   Function : platform_mem_init() [mandatory]
    4.5.   Function: plat_get_rotpk_info()
    4.6.   Function: plat_get_nv_ctr()
    4.7.   Function: plat_set_nv_ctr()
    4.8.   Function: plat_set_nv_ctr2()

5.   Common mandatory function modifications

    5.1.   Function : plat_my_core_pos()
    5.2.   Function : plat_core_pos_by_mpidr()

6.   Common optional modifications

    6.1.   Function : plat_set_my_stack()
    6.2.   Function : plat_get_my_stack()
    6.3.   Function : plat_report_exception()
    6.4.   Function : plat_reset_handler()
    6.5.   Function : plat_disable_acp()
    6.6.   Function : plat_error_handler()
    6.7.   Function : plat_panic_handler()
    6.8.   Function : plat_get_bl_image_load_info()
    6.9.   Function : plat_get_next_bl_params()
    6.10.   Function : plat_get_stack_protector_canary()
    6.11.   Function : plat_flush_next_bl_params()
    6.12.   Function : plat_log_get_prefix()

7.   Modifications specific to a Boot Loader stage
8.   Boot Loader Stage 1 (BL1)

    8.1.   Function : bl1_early_platform_setup() [mandatory]
    8.2.   Function : bl1_plat_arch_setup() [mandatory]
    8.3.   Function : bl1_platform_setup() [mandatory]
    8.4.   Function : bl1_plat_sec_mem_layout() [mandatory]
    8.5.   Function : bl1_plat_prepare_exit() [optional]
    8.6.   Function : bl1_plat_set_ep_info() [optional]
    8.7.   Function : bl1_plat_get_next_image_id() [optional]
    8.8.   Function : bl1_plat_get_image_desc() [optional]
    8.9.   Function : bl1_plat_handle_pre_image_load() [optional]
    8.10.   Function : bl1_plat_handle_post_image_load() [optional]
    8.11.   Function : bl1_plat_fwu_done() [optional]
    8.12.   Function : bl1_plat_mem_check() [mandatory]

9.   Boot Loader Stage 2 (BL2)

    9.1.   Function : bl2_early_platform_setup() [mandatory]
    9.2.   Function : bl2_plat_arch_setup() [mandatory]
    9.3.   Function : bl2_platform_setup() [mandatory]
    9.4.   Function : bl2_plat_sec_mem_layout() [mandatory]
    9.5.   Function : bl2_plat_handle_pre_image_load() [optional]
    9.6.   Function : bl2_plat_handle_post_image_load() [optional]
    9.7.   Function : bl2_plat_get_scp_bl2_meminfo() [mandatory]
    9.8.   Function : bl2_plat_handle_scp_bl2() [mandatory]
    9.9.   Function : bl2_plat_get_bl31_params() [mandatory]
    9.10.   Funtion : bl2_plat_get_bl31_ep_info() [mandatory]
    9.11.   Function : bl2_plat_set_bl31_ep_info() [mandatory]
    9.12.   Function : bl2_plat_set_bl32_ep_info() [mandatory]
    9.13.   Function : bl2_plat_set_bl33_ep_info() [mandatory]
    9.14.   Function : bl2_plat_get_bl32_meminfo() [mandatory]
    9.15.   Function : bl2_plat_get_bl33_meminfo() [mandatory]
    9.16.   Function : bl2_plat_flush_bl31_params() [mandatory]
    9.17.   Function : plat_get_ns_image_entrypoint() [mandatory]
    9.18.   Function : bl2_plat_preload_setup [optional]
    9.19.   Function : plat_try_next_boot_source() [optional]

10.   Boot Loader Stage 2 (BL2) at EL3

    10.1.   Function : bl2_el3_early_platform_setup() [mandatory]
    10.2.   Function : bl2_el3_plat_arch_setup() [mandatory]
    10.3.   Function : bl2_el3_plat_prepare_exit() [optional]

11.   FWU Boot Loader Stage 2 (BL2U)

    11.1.   Function : bl2u_early_platform_setup() [mandatory]
    11.2.   Function : bl2u_plat_arch_setup() [mandatory]
    11.3.   Function : bl2u_platform_setup() [mandatory]
    11.4.   Function : bl2u_plat_handle_scp_bl2u() [optional]

12.   Boot Loader Stage 3-1 (BL31)

    12.1.   Function : bl31_early_platform_setup() [mandatory]
    12.2.   Function : bl31_plat_arch_setup() [mandatory]
    12.3.   Function : bl31_platform_setup() [mandatory]
    12.4.   Function : bl31_plat_runtime_setup() [optional]
    12.5.   Function : bl31_plat_get_next_image_ep_info() [mandatory]
    12.6.   Function : plat_get_syscnt_freq2() [mandatory]
    12.7.   #define : PLAT_PERCPU_BAKERY_LOCK_SIZE [optional]
    12.8.   SDEI porting requirements
        12.8.1.   Macros
            12.8.1.1.   Macro: PLAT_SDEI_NORMAL_PRI [mandatory]
            12.8.1.2.   Macro: PLAT_SDEI_CRITICAL_PRI [mandatory]
        12.8.2.   Functions
            12.8.2.1.   Function: int plat_sdei_validate_entry_point(uintptr_t ep) [optional]
            12.8.2.2.   Function: void plat_sdei_handle_masked_trigger(uint64_t mpidr, unsigned int intr) [optional]

13.   Power State Coordination Interface (in BL31)

    13.1.   Function : plat_psci_stat_accounting_start() [optional]
    13.2.   Function : plat_psci_stat_accounting_stop() [optional]
    13.3.   Function : plat_psci_stat_get_residency() [optional]
    13.4.   Function : plat_get_target_pwr_state() [optional]
    13.5.   Function : plat_get_power_domain_tree_desc() [mandatory]
    13.6.   Function : plat_setup_psci_ops() [mandatory]
        13.6.1.   plat_psci_ops.cpu_standby()
        13.6.2.   plat_psci_ops.pwr_domain_on()
        13.6.3.   plat_psci_ops.pwr_domain_off()
        13.6.4.   plat_psci_ops.pwr_domain_suspend_pwrdown_early() [optional]
        13.6.5.   plat_psci_ops.pwr_domain_suspend()
        13.6.6.   plat_psci_ops.pwr_domain_pwr_down_wfi()
        13.6.7.   plat_psci_ops.pwr_domain_on_finish()
        13.6.8.   plat_psci_ops.pwr_domain_suspend_finish()
        13.6.9.   plat_psci_ops.system_off()
        13.6.10.   plat_psci_ops.system_reset()
        13.6.11.   plat_psci_ops.validate_power_state()
        13.6.12.   plat_psci_ops.validate_ns_entrypoint()
        13.6.13.   plat_psci_ops.get_sys_suspend_power_state()
        13.6.14.   plat_psci_ops.get_pwr_lvl_state_idx()
        13.6.15.   plat_psci_ops.translate_power_state_by_mpidr()
        13.6.16.   plat_psci_ops.get_node_hw_state()
        13.6.17.   plat_psci_ops.system_reset2()
        13.6.18.   plat_psci_ops.write_mem_protect()
        13.6.19.   plat_psci_ops.read_mem_protect()
        13.6.20.   plat_psci_ops.mem_protect_chk()

14.   Interrupt Management framework (in BL31)

    14.1.   Function : plat_interrupt_type_to_line() [mandatory]
    14.2.   Function : plat_ic_get_pending_interrupt_type() [mandatory]
    14.3.   Function : plat_ic_get_pending_interrupt_id() [mandatory]
    14.4.   Function : plat_ic_acknowledge_interrupt() [mandatory]
    14.5.   Function : plat_ic_end_of_interrupt() [mandatory]
    14.6.   Function : plat_ic_get_interrupt_type() [mandatory]

15.   Crash Reporting mechanism (in BL31)

    15.1.   Function : plat_crash_console_init
    15.2.   Function : plat_crash_console_putc
    15.3.   Function : plat_crash_console_flush

